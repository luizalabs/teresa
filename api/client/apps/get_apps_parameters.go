package apps

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetAppsParams creates a new GetAppsParams object
// with the default values initialized.
func NewGetAppsParams() *GetAppsParams {
	var (
		limitDefault int64 = int64(20)
		sinceDefault int64 = int64(0)
	)
	return &GetAppsParams{
		Limit: &limitDefault,
		Since: &sinceDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetAppsParamsWithTimeout creates a new GetAppsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetAppsParamsWithTimeout(timeout time.Duration) *GetAppsParams {
	var (
		limitDefault int64 = int64(20)
		sinceDefault int64 = int64(0)
	)
	return &GetAppsParams{
		Limit: &limitDefault,
		Since: &sinceDefault,

		timeout: timeout,
	}
}

/*GetAppsParams contains all the parameters to send to the API endpoint
for the get apps operation typically these are written to a http.Request
*/
type GetAppsParams struct {

	/*Limit
	  Limit

	*/
	Limit *int64
	/*Since
	  Offset

	*/
	Since *int64
	/*TeamID
	  Team ID

	*/
	TeamID int64

	timeout time.Duration
}

// WithLimit adds the limit to the get apps params
func (o *GetAppsParams) WithLimit(Limit *int64) *GetAppsParams {
	o.Limit = Limit
	return o
}

// WithSince adds the since to the get apps params
func (o *GetAppsParams) WithSince(Since *int64) *GetAppsParams {
	o.Since = Since
	return o
}

// WithTeamID adds the teamId to the get apps params
func (o *GetAppsParams) WithTeamID(TeamID int64) *GetAppsParams {
	o.TeamID = TeamID
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *GetAppsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Since != nil {

		// query param since
		var qrSince int64
		if o.Since != nil {
			qrSince = *o.Since
		}
		qSince := swag.FormatInt64(qrSince)
		if qSince != "" {
			if err := r.SetQueryParam("since", qSince); err != nil {
				return err
			}
		}

	}

	// path param team_id
	if err := r.SetPathParam("team_id", swag.FormatInt64(o.TeamID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
