package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*PatchAppRequest used to create a patch update to an app

swagger:model PatchAppRequest
*/
type PatchAppRequest struct {

	/* op

	Required: true
	*/
	Op *string `json:"op"`

	/* path

	Required: true
	*/
	Path *string `json:"path"`

	/* value

	Required: true
	*/
	Value []*PatchAppEnvVar `json:"value"`
}

// Validate validates this patch app request
func (m *PatchAppRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOp(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePath(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var patchAppRequestTypeOpPropEnum []interface{}

// prop value enum
func (m *PatchAppRequest) validateOpEnum(path, location string, value string) error {
	if patchAppRequestTypeOpPropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["add","remove"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			patchAppRequestTypeOpPropEnum = append(patchAppRequestTypeOpPropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, patchAppRequestTypeOpPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PatchAppRequest) validateOp(formats strfmt.Registry) error {

	if err := validate.Required("op", "body", m.Op); err != nil {
		return err
	}

	// value enum
	if err := m.validateOpEnum("op", "body", *m.Op); err != nil {
		return err
	}

	return nil
}

func (m *PatchAppRequest) validatePath(formats strfmt.Registry) error {

	if err := validate.Required("path", "body", m.Path); err != nil {
		return err
	}

	return nil
}

func (m *PatchAppRequest) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", m.Value); err != nil {
		return err
	}

	for i := 0; i < len(m.Value); i++ {

		if swag.IsZero(m.Value[i]) { // not required
			continue
		}

		if m.Value[i] != nil {

			if err := m.Value[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}
