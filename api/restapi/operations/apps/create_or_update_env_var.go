package apps

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// CreateOrUpdateEnvVarHandlerFunc turns a function with the right signature into a create or update env var handler
type CreateOrUpdateEnvVarHandlerFunc func(CreateOrUpdateEnvVarParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateOrUpdateEnvVarHandlerFunc) Handle(params CreateOrUpdateEnvVarParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// CreateOrUpdateEnvVarHandler interface for that can handle valid create or update env var params
type CreateOrUpdateEnvVarHandler interface {
	Handle(CreateOrUpdateEnvVarParams, interface{}) middleware.Responder
}

// NewCreateOrUpdateEnvVar creates a new http.Handler for the create or update env var operation
func NewCreateOrUpdateEnvVar(ctx *middleware.Context, handler CreateOrUpdateEnvVarHandler) *CreateOrUpdateEnvVar {
	return &CreateOrUpdateEnvVar{Context: ctx, Handler: handler}
}

/*CreateOrUpdateEnvVar swagger:route PUT /teams/{team_id}/apps/{app_id}/env-vars/{env_var_key} apps createOrUpdateEnvVar

Create or Update a env variable of the app

Creates a new EnvVar for the app, or update if the envvar exists

*/
type CreateOrUpdateEnvVar struct {
	Context *middleware.Context
	Handler CreateOrUpdateEnvVarHandler
}

func (o *CreateOrUpdateEnvVar) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewCreateOrUpdateEnvVarParams()

	uprinc, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
