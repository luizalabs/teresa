package apps

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/luizalabs/paas/api/models"
)

/*CreateOrUpdateEnvVarOK EnvVar updated

swagger:response createOrUpdateEnvVarOK
*/
type CreateOrUpdateEnvVarOK struct {

	// In: body
	Payload *models.EnvVar `json:"body,omitempty"`
}

// NewCreateOrUpdateEnvVarOK creates CreateOrUpdateEnvVarOK with default headers values
func NewCreateOrUpdateEnvVarOK() *CreateOrUpdateEnvVarOK {
	return &CreateOrUpdateEnvVarOK{}
}

// WithPayload adds the payload to the create or update env var o k response
func (o *CreateOrUpdateEnvVarOK) WithPayload(payload *models.EnvVar) *CreateOrUpdateEnvVarOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create or update env var o k response
func (o *CreateOrUpdateEnvVarOK) SetPayload(payload *models.EnvVar) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateOrUpdateEnvVarOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*CreateOrUpdateEnvVarCreated EnvVar created

swagger:response createOrUpdateEnvVarCreated
*/
type CreateOrUpdateEnvVarCreated struct {

	// In: body
	Payload *models.EnvVar `json:"body,omitempty"`
}

// NewCreateOrUpdateEnvVarCreated creates CreateOrUpdateEnvVarCreated with default headers values
func NewCreateOrUpdateEnvVarCreated() *CreateOrUpdateEnvVarCreated {
	return &CreateOrUpdateEnvVarCreated{}
}

// WithPayload adds the payload to the create or update env var created response
func (o *CreateOrUpdateEnvVarCreated) WithPayload(payload *models.EnvVar) *CreateOrUpdateEnvVarCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create or update env var created response
func (o *CreateOrUpdateEnvVarCreated) SetPayload(payload *models.EnvVar) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateOrUpdateEnvVarCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*CreateOrUpdateEnvVarUnauthorized User not authorized

swagger:response createOrUpdateEnvVarUnauthorized
*/
type CreateOrUpdateEnvVarUnauthorized struct {

	// In: body
	Payload *models.Unauthorized `json:"body,omitempty"`
}

// NewCreateOrUpdateEnvVarUnauthorized creates CreateOrUpdateEnvVarUnauthorized with default headers values
func NewCreateOrUpdateEnvVarUnauthorized() *CreateOrUpdateEnvVarUnauthorized {
	return &CreateOrUpdateEnvVarUnauthorized{}
}

// WithPayload adds the payload to the create or update env var unauthorized response
func (o *CreateOrUpdateEnvVarUnauthorized) WithPayload(payload *models.Unauthorized) *CreateOrUpdateEnvVarUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create or update env var unauthorized response
func (o *CreateOrUpdateEnvVarUnauthorized) SetPayload(payload *models.Unauthorized) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateOrUpdateEnvVarUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*CreateOrUpdateEnvVarForbidden User does not have the credentials to access this resource


swagger:response createOrUpdateEnvVarForbidden
*/
type CreateOrUpdateEnvVarForbidden struct {

	// In: body
	Payload *models.Unauthorized `json:"body,omitempty"`
}

// NewCreateOrUpdateEnvVarForbidden creates CreateOrUpdateEnvVarForbidden with default headers values
func NewCreateOrUpdateEnvVarForbidden() *CreateOrUpdateEnvVarForbidden {
	return &CreateOrUpdateEnvVarForbidden{}
}

// WithPayload adds the payload to the create or update env var forbidden response
func (o *CreateOrUpdateEnvVarForbidden) WithPayload(payload *models.Unauthorized) *CreateOrUpdateEnvVarForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create or update env var forbidden response
func (o *CreateOrUpdateEnvVarForbidden) SetPayload(payload *models.Unauthorized) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateOrUpdateEnvVarForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*CreateOrUpdateEnvVarDefault Error

swagger:response createOrUpdateEnvVarDefault
*/
type CreateOrUpdateEnvVarDefault struct {
	_statusCode int

	// In: body
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreateOrUpdateEnvVarDefault creates CreateOrUpdateEnvVarDefault with default headers values
func NewCreateOrUpdateEnvVarDefault(code int) *CreateOrUpdateEnvVarDefault {
	if code <= 0 {
		code = 500
	}

	return &CreateOrUpdateEnvVarDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the create or update env var default response
func (o *CreateOrUpdateEnvVarDefault) WithStatusCode(code int) *CreateOrUpdateEnvVarDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the create or update env var default response
func (o *CreateOrUpdateEnvVarDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the create or update env var default response
func (o *CreateOrUpdateEnvVarDefault) WithPayload(payload *models.Error) *CreateOrUpdateEnvVarDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create or update env var default response
func (o *CreateOrUpdateEnvVarDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateOrUpdateEnvVarDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
