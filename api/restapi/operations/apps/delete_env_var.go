package apps

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// DeleteEnvVarHandlerFunc turns a function with the right signature into a delete env var handler
type DeleteEnvVarHandlerFunc func(DeleteEnvVarParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteEnvVarHandlerFunc) Handle(params DeleteEnvVarParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// DeleteEnvVarHandler interface for that can handle valid delete env var params
type DeleteEnvVarHandler interface {
	Handle(DeleteEnvVarParams, interface{}) middleware.Responder
}

// NewDeleteEnvVar creates a new http.Handler for the delete env var operation
func NewDeleteEnvVar(ctx *middleware.Context, handler DeleteEnvVarHandler) *DeleteEnvVar {
	return &DeleteEnvVar{Context: ctx, Handler: handler}
}

/*DeleteEnvVar swagger:route DELETE /teams/{team_id}/apps/{app_id}/env-vars/{env_var_key} apps deleteEnvVar

Delete the env var for the app

*/
type DeleteEnvVar struct {
	Context *middleware.Context
	Handler DeleteEnvVarHandler
}

func (o *DeleteEnvVar) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewDeleteEnvVarParams()

	uprinc, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
