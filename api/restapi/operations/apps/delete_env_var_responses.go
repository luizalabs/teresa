package apps

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/luizalabs/paas/api/models"
)

/*DeleteEnvVarNoContent No content

swagger:response deleteEnvVarNoContent
*/
type DeleteEnvVarNoContent struct {
}

// NewDeleteEnvVarNoContent creates DeleteEnvVarNoContent with default headers values
func NewDeleteEnvVarNoContent() *DeleteEnvVarNoContent {
	return &DeleteEnvVarNoContent{}
}

// WriteResponse to the client
func (o *DeleteEnvVarNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(204)
}

/*DeleteEnvVarDefault Error

swagger:response deleteEnvVarDefault
*/
type DeleteEnvVarDefault struct {
	_statusCode int

	// In: body
	Payload *models.Error `json:"body,omitempty"`
}

// NewDeleteEnvVarDefault creates DeleteEnvVarDefault with default headers values
func NewDeleteEnvVarDefault(code int) *DeleteEnvVarDefault {
	if code <= 0 {
		code = 500
	}

	return &DeleteEnvVarDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the delete env var default response
func (o *DeleteEnvVarDefault) WithStatusCode(code int) *DeleteEnvVarDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the delete env var default response
func (o *DeleteEnvVarDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the delete env var default response
func (o *DeleteEnvVarDefault) WithPayload(payload *models.Error) *DeleteEnvVarDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete env var default response
func (o *DeleteEnvVarDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteEnvVarDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
