---
swagger: "2.0"
info:
  description: The Teresa PaaS API
  title: Teresa API
  version: 0.0.1
host: localhost:8080
consumes:
- application/json
produces:
- application/json
schemes:
- http
basePath: /v1
securityDefinitions:
  api_key:
    type: apiKey
    name: token
    in: query
  token_header:
    type: apiKey
    name: Authorization
    in: header
paths:
  /teams:
    get:
      summary: Get teams
      description: Find and filter teams
      tags:
        - teams
      operationId: getTeams
      security:
        - api_key: []
        - token_header: []
      parameters:
        - $ref: "#/parameters/since"
        - $ref: "#/parameters/limit"
      responses:
        200:
          description: Get teams
          schema:
            allOf:
              - $ref: "#/definitions/Pagination"
              - properties:
                  items:
                    type: array
                    items:
                      $ref: "#/definitions/Team"
        400:
          description: User sent a bad request
          schema:
            $ref: "#/definitions/BadRequest"
        401:
          description: User not authorized
          schema:
            $ref: "#/definitions/Unauthorized"
        403:
          description: |
            User does not have the credentials to access this resource
          schema:
            $ref: "#/definitions/Unauthorized"
        404:
          description: Resource not found
          schema:
            $ref: "#/definitions/NotFound"
        default:
          description: User not authorized
          schema:
            $ref: "#/definitions/Unauthorized"
    post:
      summary: Create teams
      description: Create a team.
      tags:
        - teams
      operationId: createTeam
      security:
        - api_key: []
        - token_header: []
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: "#/definitions/Team"
      responses:
        201:
          description: Newly created team
          schema:
            $ref: "#/definitions/Team"
        400:
          description: User sent a bad request
          schema:
            $ref: "#/definitions/BadRequest"
        401:
          description: User not authorized
          schema:
            $ref: "#/definitions/Unauthorized"
        403:
          description: |
            User does not have the credentials to access this resource
          schema:
            $ref: "#/definitions/Unauthorized"
        default:
          description: User not authorized
          schema:
            $ref: "#/definitions/Unauthorized"
  /teams/{team_id}:
    get:
      summary: Get team details
      description: Get the details of a specific team
      tags:
        - teams
      operationId: getTeamDetail
      security:
        - api_key: []
        - token_header: []
      parameters:
        - $ref: "#/parameters/teamId"
      responses:
        200:
          description: Team details
          schema:
            $ref: "#/definitions/Team"
        401:
          description: User not authorized
          schema:
            $ref: "#/definitions/Unauthorized"
        403:
          description: |
            User does not have the credentials to access this resource
          schema:
            $ref: "#/definitions/Unauthorized"
        default:
          description: Error
          schema:
            $ref: "#/definitions/Error"
    put:
      summary: Update team
      description: Update team details
      tags:
        - teams
      operationId: updateTeam
      security:
        - api_key: []
        - token_header: []
      parameters:
        - $ref: "#/parameters/teamId"
        - name: body
          in: body
          required: true
          schema:
            $ref: "#/definitions/Team"
      responses:
        200:
          description: Team details
          schema:
            $ref: "#/definitions/Team"
        default:
          description: Error
          schema:
            $ref: "#/definitions/Error"
    delete:
      summary: Delete team
      description: Delete team
      tags:
        - teams
      operationId: deleteTeam
      security:
        - api_key: []
        - token_header: []
      parameters:
        - $ref: "#/parameters/teamId"
      responses:
        204:
          description: No content
        default:
          description: Error
          schema:
            $ref: "#/definitions/Error"
  /teams/{team_id}/apps:
    get:
      summary: Get team apps
      description: Get team apps
      tags:
        - apps
      operationId: getApps
      security:
        - api_key: []
        - token_header: []
      parameters:
        - $ref: "#/parameters/teamId"
        - $ref: "#/parameters/since"
        - $ref: "#/parameters/limit"
      responses:
        200:
          description: Apps
          schema:
            allOf:
              - $ref: "#/definitions/Pagination"
              - properties:
                  items:
                    type: array
                    items:
                      $ref: "#/definitions/App"
        401:
          description: User not authorized
          schema:
            $ref: "#/definitions/Unauthorized"
        403:
          description: |
            User does not have the credentials to access this resource
          schema:
            $ref: "#/definitions/Unauthorized"
        default:
          description: Error
          schema:
            $ref: "#/definitions/Error"
    post:
      summary: Create an app
      description: Create an app
      tags:
        - apps
      operationId: createApp
      security:
        - api_key: []
        - token_header: []
      parameters:
        - $ref: "#/parameters/teamId"
        - name: body
          in: body
          required: true
          schema:
            $ref: "#/definitions/App"
      responses:
        201:
          description: Newly created app
          schema:
            $ref: "#/definitions/App"
        401:
          description: User not authorized
          schema:
            $ref: "#/definitions/Unauthorized"
        403:
          description: |
            User does not have the credentials to access this resource
          schema:
            $ref: "#/definitions/Unauthorized"
        default:
          description: Error
          schema:
            $ref: "#/definitions/Error"
  /teams/{team_id}/apps/{app_id}:
    get:
      summary: Get app details
      description: Get app details
      tags:
        - apps
      operationId: getAppDetails
      security:
        - api_key: []
        - token_header: []
      parameters:
        - $ref: "#/parameters/teamId"
        - $ref: "#/parameters/appId"
      responses:
        200:
          description: App details
          schema:
            $ref: "#/definitions/App"
        401:
          description: User not authorized
          schema:
            $ref: "#/definitions/Unauthorized"
        403:
          description: |
            User does not have the credentials to access this resource
          schema:
            $ref: "#/definitions/Unauthorized"
        default:
          description: Error
          schema:
            $ref: "#/definitions/Error"
    put:
      summary: Update app
      description: Update app properties, such as number of replicas and other things.
      tags:
        - apps
      operationId: updateApp
      security:
        - api_key: []
        - token_header: []
      parameters:
        - $ref: "#/parameters/appId"
        - $ref: "#/parameters/teamId"
        - name: body
          in: body
          required: true
          schema:
            $ref: "#/definitions/App"
      responses:
        200:
          description: App
          schema:
            $ref: "#/definitions/App"
        401:
          description: User not authorized
          schema:
            $ref: "#/definitions/Unauthorized"
        403:
          description: |
            User does not have the credentials to access this resource
          schema:
            $ref: "#/definitions/Unauthorized"
        default:
          description: Error
          schema:
            $ref: "#/definitions/Error"
    patch:
      summary: Partial update app
      description: Update some app properties, for now, only accept envvars
      tags:
        - apps
      operationId: partialUpdateApp
      security:
        - api_key: []
        - token_header: []
      # consumes:
      #   - application/json-patch+json
      parameters:
        - $ref: "#/parameters/appId"
        - $ref: "#/parameters/teamId"
        - name: body
          in: body
          required: true
          schema:
            type: array
            items:
              $ref: "#/definitions/PatchAppRequest"
      responses:
        200:
          description: App
          schema:
            $ref: "#/definitions/App"
        401:
          description: User not authorized
          schema:
            $ref: "#/definitions/Unauthorized"
        403:
          description: |
            User does not have the credentials to access this resource
          schema:
            $ref: "#/definitions/Unauthorized"
        default:
          description: Error
          schema:
            $ref: "#/definitions/Error"

  /teams/{team_id}/apps/{app_id}/deployments:
    get:
      summary: Get app deployments
      description: Get deployments an app may have
      tags:
        - deployments
      operationId: getDeployments
      security:
        - api_key: []
        - token_header: []
      parameters:
        - $ref: "#/parameters/teamId"
        - $ref: "#/parameters/appId"
        - $ref: "#/parameters/since"
        - $ref: "#/parameters/limit"
      responses:
        200:
          description: Get app deployments
          schema:
            allOf:
              - $ref: "#/definitions/Pagination"
              - properties:
                  items:
                    type: array
                    items:
                      $ref: "#/definitions/Deployment"
        401:
          description: User not authorized
          schema:
            $ref: "#/definitions/Unauthorized"
        403:
          description: |
            User does not have the credentials to access this resource
          schema:
            $ref: "#/definitions/Unauthorized"
        default:
          description: Error
          schema:
            $ref: "#/definitions/Error"
    post:
      summary: Create a new deploy
      description: Create a deploy for an app
      tags:
        - deployments
      operationId: createDeployment
      security:
        - api_key: []
        - token_header: []
      consumes:
        - multipart/form-data
      parameters:
        - $ref: "#/parameters/teamId"
        - $ref: "#/parameters/appId"
        - name: description
          in: formData
          required: false
          type: string
        - name: appTarball
          in: formData
          required: true
          type: file
      responses:
        200:
          description: Deployment
          schema:
            $ref: "#/definitions/Deployment"
        401:
          description: User not authorized
          schema:
            $ref: "#/definitions/Unauthorized"
        403:
          description: |
            User does not have the credentials to access this resource
          schema:
            $ref: "#/definitions/Unauthorized"
        default:
          description: Error
          schema:
            $ref: "#/definitions/Error"
  /users:
    get:
      summary: Get users
      description: Find and filter users
      tags:
        - users
      operationId: getUsers
      security:
        - api_key: []
        - token_header: []
      parameters:
        - $ref: "#/parameters/since"
        - $ref: "#/parameters/limit"
      responses:
        200:
          description: Get users
          schema:
            allOf:
              - $ref: "#/definitions/Pagination"
              - properties:
                  items:
                    type: array
                    items:
                      $ref: "#/definitions/User"
        400:
          description: User sent a bad request
          schema:
            $ref: "#/definitions/BadRequest"
        401:
          description: User not authorized
          schema:
            $ref: "#/definitions/Unauthorized"
        403:
          description: |
            User does not have the credentials to access this resource
          schema:
            $ref: "#/definitions/Unauthorized"
        404:
          description: Resource not found
          schema:
            $ref: "#/definitions/NotFound"
        default:
          description: Error
          schema:
            $ref: "#/definitions/Error"
    post:
      summary: Create user
      description: Create a user.
      tags:
        - users
      operationId: createUser
      security:
        - api_key: []
        - token_header: []
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        201:
          description: Newly created user
          schema:
            $ref: "#/definitions/User"
        400:
          description: User sent a bad request
          schema:
            $ref: "#/definitions/BadRequest"
        401:
          description: User not authorized
          schema:
            $ref: "#/definitions/Unauthorized"
        403:
          description: |
            User does not have the credentials to access this resource
          schema:
            $ref: "#/definitions/Unauthorized"
        default:
          description: Error
          schema:
            $ref: "#/definitions/Error"
  /users/{user_id}:
    get:
      summary: Get user details
      description: Get user details
      tags:
        - users
      operationId: getUserDetails
      security:
        - api_key: []
        - token_header: []
      parameters:
        - $ref: "#/parameters/userId"
        - $ref: "#/parameters/since"
        - $ref: "#/parameters/limit"
      responses:
        200:
          description: User details
          schema:
            $ref: "#/definitions/User"
        401:
          description: User not authorized
          schema:
            $ref: "#/definitions/Unauthorized"
        403:
          description: |
            User does not have the credentials to access this resource
          schema:
            $ref: "#/definitions/Unauthorized"
        404:
          description: Resource not found
          schema:
            $ref: "#/definitions/NotFound"
        default:
          description: Error
          schema:
            $ref: "#/definitions/Error"
    delete:
      summary: Delete user
      description: Delete user
      tags:
        - users
      operationId: deleteUser
      security:
        - api_key: []
        - token_header: []
      parameters:
        - $ref: "#/parameters/userId"
      responses:
        204:
          description: No content
        default:
          description: Error
          schema:
            $ref: "#/definitions/Error"
    put:
      summary: Update user
      description: Update user details
      tags:
        - users
      operationId: updateUser
      security:
        - api_key: []
        - token_header: []
      parameters:
        - $ref: "#/parameters/userId"
      responses:
        200:
          description: User details
          schema:
            $ref: "#/definitions/User"
        401:
          description: User not authorized
          schema:
            $ref: "#/definitions/Unauthorized"
        403:
          description: |
            User does not have the credentials to access this resource
          schema:
            $ref: "#/definitions/Unauthorized"
        404:
          description: Resource not found
          schema:
            $ref: "#/definitions/NotFound"
        default:
          description: Error
          schema:
            $ref: "#/definitions/Error"
  /users/me:
    get:
      summary: Get logged user info
      description: Get info on user of current session, if any
      tags:
        - users
      operationId: getCurrentUser
      security:
        - api_key: []
        - token_header: []
      responses:
        200:
          description: User info
          schema:
            $ref: "#/definitions/User"
        404:
          description: Resource not found
          schema:
            $ref: "#/definitions/NotFound"
        default:
          description: Error
          schema:
            $ref: "#/definitions/Error"
  /login:
    post:
      summary: Log the user
      description: User login
      tags:
        - auth
      operationId: userLogin
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: "#/definitions/Login"
      responses:
        200:
          description: Login token
          schema:
            $ref: "#/definitions/LoginToken"
        401:
          description: Unauthorized
          schema:
            $ref: "#/definitions/Forbidden"
        403:
          description: Forbidden
          schema:
            $ref: "#/definitions/Forbidden"
        default:
          description: Error
          schema:
            $ref: "#/definitions/Error"
  /swagger:
    x-swagger-pipe: swagger_raw
parameters:
  appId:
    name: app_id
    description: App ID
    in: path
    type: integer
    format: int64
    required: true
  teamId:
    name: team_id
    description: Team ID
    in: path
    type: integer
    format: int64
    required: true
  userId:
    name: user_id
    description: User ID
    in: path
    type: integer
    format: int64
    required: true
  since:
    name: since
    description: Offset
    in: query
    type: integer
    format: int64
    default: 0
  limit:
    name: limit
    description: Limit
    in: query
    type: integer
    format: int64
    default: 20
definitions:
  Login:
    required:
      - email
      - password
    properties:
      email:
        type: string
        format: email
        minLength: 1
      password:
        type: string
        format: password
        minLength: 1
  Pagination:
    properties:
      pagination:
        properties:
          self:
            type: string
          nextUrl:
            type: string
          previousUrl:
            type: string
          size:
            type: integer
          length:
            type: integer
  Team:
    required:
      - name
    properties:
      id:
        type: integer
      name:
        type: string
      email:
        type: string
        format: email
      url:
        type: string
      apps:
        type: array
        items:
          $ref: "#/definitions/App"
      # # FIXME: https://github.com/go-swagger/go-swagger/issues/537
      # members:
      #   type: array
      #   items:
      #     $ref: "#/definitions/User"
  User:
    type: object
    required:
      - name
      - email
      - password
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
        minLength: 5
      email:
        type: string
        minLength: 8
      password:
        type: string
        minLength: 8
      teams:
        type: array
        items:
          $ref: "#/definitions/Team"
  App:
    type: object
    required:
      - name
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      # creator:
      #   $ref: "#/definitions/User"
      scale:
        type: integer
        description: number of PODs running the app
        default: 1
      # # TODO: in a future not to far far away, we will have a git deployment
      # repository:
      #   type: string
      #   description: internal git repository
      addressList:
        type: array
        description: list of the external addresses of the app
        items:
          type: string
      deploymentList:
        type: array
        items:
          $ref: "#/definitions/Deployment"
      envVars:
        type: array
        items:
          $ref: "#/definitions/EnvVar"
  PatchAppRequest: # for now, only this two https://tools.ietf.org/html/rfc6902 || http://jsonpatch.com/
    type: object
    description: used to create a patch update to an app
    required:
      - op
      - path
      - value
    properties:
      op:
        type: string
        default: add
        enum:
          - add
          - remove
      path:
        type: string
        default: /envvars
      value:
        type: array
        items:
          $ref: "#/definitions/PatchAppEnvVar"
  PatchAppEnvVar:
    type: object
    description: app environment var
    required:
      - key
    properties:
      key:
        type: string
      value:
        type: string
  EnvVar:
    type: object
    description: app environment var
    required:
      - key
      - value
    properties:
      key:
        type: string
      value:
        type: string
  Deployment:
    required:
      - uuid
      - description
    properties:
      uuid:
        type: string
      description:
        type: string
      origin:
        type: string
        description: where the deploy process was started
        default: cli_app_deploy
        enum:
          - cli_app_deploy
          - git
          - ci
      # # FIXME: https://github.com/go-swagger/go-swagger/issues/537
      # author:
      #   $ref: "#/definitions/User"
      when:
        type: string
        format: date-time
      error:
        type: string
        description: description of the error, if any
  LoginToken:
    type: object
    properties:
      token:
        type: string
  NotFound:
    type: object
    properties:
      code:
        type: integer
        format: int64
        default: 404
      message:
        type: string
        default: Not Found
  BadRequest:
    type: object
    properties:
      code:
        type: integer
        format: int64
        default: 400
      message:
        type: string
        default: Bad Request
  Unauthorized:
    type: object
    properties:
      code:
        type: integer
        format: int64
        default: 401
      message:
        type: string
        default: Unauthorized
  Forbidden:
    type: object
    properties:
      code:
        type: integer
        format: int64
        default: 403
      message:
        type: string
        default: Forbidden
  Error:
    type: object
    properties:
      code:
        type: integer
        format: int64
      message:
        type: string
