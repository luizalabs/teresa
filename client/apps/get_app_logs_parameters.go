package apps

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetAppLogsParams creates a new GetAppLogsParams object
// with the default values initialized.
func NewGetAppLogsParams() *GetAppLogsParams {
	var (
		followDefault = bool(false)
		linesDefault  = int64(10)
	)
	return &GetAppLogsParams{
		Follow: &followDefault,
		Lines:  &linesDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetAppLogsParamsWithTimeout creates a new GetAppLogsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetAppLogsParamsWithTimeout(timeout time.Duration) *GetAppLogsParams {
	var (
		followDefault bool  = bool(false)
		linesDefault  int64 = int64(10)
	)
	return &GetAppLogsParams{
		Follow: &followDefault,
		Lines:  &linesDefault,

		timeout: timeout,
	}
}

/*GetAppLogsParams contains all the parameters to send to the API endpoint
for the get app logs operation typically these are written to a http.Request
*/
type GetAppLogsParams struct {

	/*AppName
	  App name

	*/
	AppName string
	/*Follow
	  Follow logs

	*/
	Follow *bool
	/*Lines
	  Logs lines

	*/
	Lines *int64

	timeout time.Duration
}

// WithAppName adds the appName to the get app logs params
func (o *GetAppLogsParams) WithAppName(appName string) *GetAppLogsParams {
	o.AppName = appName
	return o
}

// WithFollow adds the follow to the get app logs params
func (o *GetAppLogsParams) WithFollow(follow *bool) *GetAppLogsParams {
	o.Follow = follow
	return o
}

// WithLines adds the lines to the get app logs params
func (o *GetAppLogsParams) WithLines(lines *int64) *GetAppLogsParams {
	o.Lines = lines
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *GetAppLogsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	// path param app_name
	if err := r.SetPathParam("app_name", o.AppName); err != nil {
		return err
	}

	if o.Follow != nil {

		// query param follow
		var qrFollow bool
		if o.Follow != nil {
			qrFollow = *o.Follow
		}
		qFollow := swag.FormatBool(qrFollow)
		if qFollow != "" {
			if err := r.SetQueryParam("follow", qFollow); err != nil {
				return err
			}
		}

	}

	if o.Lines != nil {

		// query param lines
		var qrLines int64
		if o.Lines != nil {
			qrLines = *o.Lines
		}
		qLines := swag.FormatInt64(qrLines)
		if qLines != "" {
			if err := r.SetQueryParam("lines", qLines); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
