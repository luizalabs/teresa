package apps

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetAppLogsParams creates a new GetAppLogsParams object
// with the default values initialized.
func NewGetAppLogsParams() GetAppLogsParams {
	var (
		followDefault = bool(false)
		linesDefault  = int64(10)
	)
	return GetAppLogsParams{
		Follow: &followDefault,

		Lines: &linesDefault,
	}
}

// GetAppLogsParams contains all the bound params for the get app logs operation
// typically these are obtained from a http.Request
//
// swagger:parameters getAppLogs
type GetAppLogsParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request

	/*App name
	  Required: true
	  Pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?$
	  In: path
	*/
	AppName string
	/*Follow logs
	  In: query
	  Default: false
	*/
	Follow *bool
	/*Logs lines
	  In: query
	  Default: 10
	*/
	Lines *int64
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *GetAppLogsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error
	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	rAppName, rhkAppName, _ := route.Params.GetOK("app_name")
	if err := o.bindAppName(rAppName, rhkAppName, route.Formats); err != nil {
		res = append(res, err)
	}

	qFollow, qhkFollow, _ := qs.GetOK("follow")
	if err := o.bindFollow(qFollow, qhkFollow, route.Formats); err != nil {
		res = append(res, err)
	}

	qLines, qhkLines, _ := qs.GetOK("lines")
	if err := o.bindLines(qLines, qhkLines, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAppLogsParams) bindAppName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	o.AppName = raw

	if err := o.validateAppName(formats); err != nil {
		return err
	}

	return nil
}

func (o *GetAppLogsParams) validateAppName(formats strfmt.Registry) error {

	if err := validate.Pattern("app_name", "path", string(o.AppName), `^[a-z0-9]([-a-z0-9]*[a-z0-9])?$`); err != nil {
		return err
	}

	return nil
}

func (o *GetAppLogsParams) bindFollow(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		var followDefault bool = bool(false)
		o.Follow = &followDefault
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("follow", "query", "bool", raw)
	}
	o.Follow = &value

	return nil
}

func (o *GetAppLogsParams) bindLines(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		var linesDefault int64 = int64(10)
		o.Lines = &linesDefault
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("lines", "query", "int64", raw)
	}
	o.Lines = &value

	return nil
}
